#!/usr/bin/perl

# Copyright (c) 2008 - 2009, Eric Van Dewoestine
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions are met:
#
# * Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
# * Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# * Neither the name of Gergely Kontra or Eric Van Dewoestine nor the names
# of its contributors may be used to endorse or promote products derived
# from this software without specific prior written permission of Gergely
# Kontra or Eric Van Dewoestine.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

###
# Script which will do some basic translation of vim regex patterns to perl.
# Allows you to use ack as the vim grepprg without losing the ability to run
# :grep <ctrl-r>/
###

use strict;

# Ack installed as perl module.
eval {
  require App::Ack;
  App::Ack->import();
};

# Ack installed as standalone script.
if ($@){
  my $ackpath = `which ack`;
  $ackpath =~ s/(^\s+|\s+$)//;
  print "vimack: using standalone ack: $ackpath\n";
  my $ackcontent;
  {
    local $/=undef;
    open FILE, "$ackpath" or die "Couldn't open file: $!";
    $ackcontent = <FILE>;
    close FILE;
  }
  # hack to prevent variable warnings on eval of standalone ack.
  open(SAVE, '>&STDERR') or die $!;
  open(STDERR, '>/dev/null');
  eval "package AckStandalone; sub {" . $ackcontent . "}";
  open(STDERR, '>&SAVE') or die $!;
}

my @args= @ARGV;
my $opt = App::Ack::get_command_line_options();
my $regex = App::Ack::build_regex(defined $opt->{regex} ?
  $opt->{regex} : shift @ARGV, $opt);
my $regex_orig = $regex;

# remove leading \V that vim may add when using '*'
$regex =~ s/^\\V//g;

# translate word boundries
$regex =~ s/\\[<>]/\\b/g;

# translate non-greedy
$regex =~ s/\\{-}/*?/g;

# translate expressions that are escaped in vim, but not in perl.
# doing this makes it impossible to use a perl expression which actually needs
# the escaped literal value.
#$regex =~ s/\\([()|?+])/\1/g;

if ($regex ne $regex_orig){
  print "vimack: $regex_orig -> $regex\n";

  my $index = 0;
  foreach (@args) {
    if ($_ eq $regex_orig){
      @args[$index] = $regex;
    }
    $index++;
  }
}

unshift(@args, '--column'); # utilize my patch for rendering column numbers
unshift(@args, '-H'); # ensure ack always prints filename
unshift(@args, 'ack');

my $cmd = join(' ', @args);
print "vimack: $cmd\n";

my $exit_code = system(@args);
$exit_code >>= 8;
exit($exit_code);
